{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/tasks/task.model.ts","webpack:///./src/app/tasks/task.service.ts","webpack:///./src/app/tasks/tasks-add/tasks-add.component.css","webpack:///./src/app/tasks/tasks-add/tasks-add.component.html","webpack:///./src/app/tasks/tasks-add/tasks-add.component.ts","webpack:///./src/app/tasks/tasks-list/tasks-list.component.css","webpack:///./src/app/tasks/tasks-list/tasks-list.component.html","webpack:///./src/app/tasks/tasks-list/tasks-list.component.ts","webpack:///./src/app/tasks/tasks.component.css","webpack:///./src/app/tasks/tasks.component.html","webpack:///./src/app/tasks/tasks.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n/*This is optional for this project as we have only one page*/\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"container\\\"> <!--Bootstrap container class added for having some margin around-->\\n  <app-tasks></app-tasks> <!--Custom component app-tasks doing custom jobs-->\\n\\n</div>\\n\\n<!--Router outlet is optional as we don't have any route means only single page-->\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TasksComponent } from './tasks/tasks.component';\nimport { TasksAddComponent } from './tasks/tasks-add/tasks-add.component';\nimport { TasksListComponent } from './tasks/tasks-list/tasks-list.component';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TasksComponent,\n    TasksAddComponent,\n    TasksListComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule, //for this project this is optional as we have only one page\n    HttpClientModule, //for http\n  FormsModule //for NGModel\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Task {\r\n  public id:number;\r\n  public name:string;\r\n  public completed:boolean;\r\n  public dueDate:string;\r\n\r\n\r\n  constructor(  name: string, completed: boolean, dueDate: string, id ?: number /*id is nullable*/) {\r\n    this.name = name;\r\n    this.completed = completed;\r\n    this.dueDate = dueDate;\r\n    this.id = id;\r\n  }\r\n\r\n\r\n\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {map} from \"rxjs/operators\";\nimport {Task} from \"./task.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  //Event is great\n\n  onTaskAdded=new EventEmitter<Task>(); //this event will carry task\n\n  constructor(private http: HttpClient) {\n  }\n\n  /*get tasks using http from any api*/\n  getTasks() {\n    return this.http.get('/api/tasks');\n  }\n\n  /*save task*/\n  saveTask(task : Task, checked: boolean){\n    task.completed=checked;\n\n    return this.http.post('/api/tasks/save', task);\n  }\n\n  /*add task*/\n  addTask(task : Task){\n    return this.http.post('/api/tasks/save',task);\n  }\n  }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2tzL3Rhc2tzLWFkZC90YXNrcy1hZGQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"from-group\\\"> <!--bootstrap form-->\\n  <input type=\\\"text\\\" class=\\\"form-control\\\"\\n         placeholder=\\\"Add new Task\\\"\\n\\n\\n       [(ngModel)]=\\\"addTaskValue\\\"\\n         (keyup.enter)=\\\"onTaskAdd($event)\\\"\\n  >\\n  <!--ngModel for getting and updating form value to backend -->\\n  <!--on pressing enter we want to add task-->\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {TaskService} from \"../task.service\";\nimport {Task} from \"../task.model\";\n\n@Component({\n  selector: 'app-tasks-add',\n  templateUrl: './tasks-add.component.html',\n  styleUrls: ['./tasks-add.component.css']\n})\nexport class TasksAddComponent implements OnInit {\n  addTaskValue: string=null;\n\n  constructor(private taskService: TaskService) { }\n\n  ngOnInit() {\n  }\n\n  /*on pressing enter we will call this method and create new task*/\n  onTaskAdd( $event ){\n    let task=new Task($event.target.value, false, \"01/25/2019\");\n    /*addTask returns observable*/\n    this.taskService.addTask(task).subscribe(\n      /*on next retuns task callback*/\n      (newTask: Task)=> {\n      //clear the input\n        this.addTaskValue= ' ';\n        /*onTaskAdded is an event we are trigerring an event */\n        this.taskService.onTaskAdded.emit(newTask);// we are emitting this event with task as package\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2tzL3Rhc2tzLWxpc3QvdGFza3MtbGlzdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<ul class=\\\"list-group\\\"> <!--bootstrap4 unorderd list-->\\n  <li *ngFor=\\\"let task of tasks\\\" class=\\\"list-group-item\\\"><!--ngfor iterate tasks and get single task-->\\n    <div class=\\\"task-checkbox\\\"> <!--bootstrap checkbox-->\\n      <!--change from ng for sending event to backend for checkbox selection-->\\n      <input type=\\\"checkbox\\\" class=\\\"list-child\\\" (change)=\\\"onTaskChange($event,task)\\\" [checked]=\\\"task.completed\\\">\\n\\n      <span ngClass=\\\"{{task.completed ? 'name completed' : 'name'}} float-sm-right\\\">{{task.name}}</span>\\n      <!--Shows the dueDate in the badge and change badge color according to task completed flag -->\\n      <!--float-right for move the badge to right-->\\n      <span class=\\\"badge  {{getDueDateBadge(task)}} float-right \\\">{{task.dueDate}}</span> <!--//here second class is either badge-primary or badge-secondary-->\\n    </div>\\n  </li>\\n</ul>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Task} from \"../task.model\";\nimport {TaskService} from \"../task.service\";\n\n@Component({\n  selector: 'app-tasks-list', /*html tag selector*/\n  templateUrl: './tasks-list.component.html',\n  styleUrls: ['./tasks-list.component.css']\n})\nexport class TasksListComponent implements OnInit {\n\n  tasks: Task[]=[]; /*Array for task*/\n\n/*Injecting task service for doing http jobs*/\n  constructor(private taskService : TaskService) { }\n\n/*On initialize we want to see all tasks*/\n  ngOnInit() {\n    /*getTasks() from taskService is a observable so by subscribing this we can get the result on next callbacks*/\n      this.taskService.getTasks().subscribe(\n        /*on Next callbacks returns tasks array*/\n        (tasks: any[]) => {\n        this.tasks=tasks; /*setting the class tasks value */\n      },\n        /*on error callbacks returns error*/\n        (error1 => console.log(error1)  /*consoling error ; for single line we don't need to use return */     )\n      );\n\n      //subscribing event and update ui\n      this.taskService.onTaskAdded.subscribe(\n        /*on next callback returns task */\n        (task : Task) => this.tasks.push(task)  /*then add the task to tasks list*/);\n  }\n\n  /*on changing task check status */\n  onTaskChange($event, task){\n\n    /*saveTask ovservable doesn't provide any result so we don't need  next or error */\n    this.taskService.saveTask(task, $event.target.checked).subscribe(); /*we don't need to return anything cz this is a void method*/\n}\n\n/*this method returns badge color for bootstrap class*/\n  getDueDateBadge(task :Task){\n    /*if task completed change the bootstrap badge color to secondary */\n  return task.completed ? 'badge-secondary' : 'badge-primary';\n  }\n}\n","module.exports = \"/*for parent tag no need to use # or . */\\r\\nh3{\\r\\n  color:royalblue;\\r\\n}\\r\\n/*for Id we need to use # */\\r\\n#tasksPanel {\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGFza3MvdGFza3MuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEM7RUFDRSxlQUFlO0FBQ2pCO0FBRUEsMkJBQTJCO0FBQzNCO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwiZmlsZSI6InNyYy9hcHAvdGFza3MvdGFza3MuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZm9yIHBhcmVudCB0YWcgbm8gbmVlZCB0byB1c2UgIyBvciAuICovXHJcbmgze1xyXG4gIGNvbG9yOnJveWFsYmx1ZTtcclxufVxyXG5cclxuLypmb3IgSWQgd2UgbmVlZCB0byB1c2UgIyAqL1xyXG4jdGFza3NQYW5lbCB7XHJcbiAgbWFyZ2luLXRvcDogNTBweDtcclxufVxyXG4iXX0= */\"","module.exports = \"<!--For emmet and css3 , Class is represented by . while Id is represented by hash-->\\n<!--As we used container to the parent div we don't need to use extra container here-->\\n<div class=\\\"row\\\"> <!--bootstrap4 row for grid-->\\n  <div class=\\\"col-md-2\\\">&nbsp;</div> <!--first two col empty on more than medium screen-->\\n  <div class=\\\"col-md-8\\\"> <!--next 8 col -->\\n    <div id=\\\"tasksPanel\\\" class=\\\"panel panel-default\\\"></div> <!--bootstrap panel create a border box -->\\n    <div class=\\\"panel-heading\\\">\\n      <h3 class=\\\"panel-title\\\">My Tasks</h3>\\n    </div>\\n    <div class=\\\"panel-body\\\">\\n      <div class=\\\"row\\\"> <!--In the panel body we are creating another grid -->\\n        <div class=\\\"col-md-12\\\"> <!--will hold all columns -->\\n          <app-tasks-add></app-tasks-add> <!--for add item -->\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\"> <!--Another grid beyond add task grid -->\\n        <div class=\\\"col-md-12\\\"><!--will hold all columns-->\\n          <app-tasks-list></app-tasks-list> <!--list of tasks -->\\n        </div>\\n      </div>\\n    </div>\\n\\n  </div>\\n  <div class=\\\"col-md-2\\\">&nbsp;</div> <!--left two col of the parent grid will hold space/ empty space again-->\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}